@using ProjectAsistencia.Services
@using ProjectAsistencia.Entity
@inject UsersServices usersService
@inject NavigationManager navigationManager
@inject AlertaService alertaService

<div class="container d-flex justify-content-center align-items-center" style="min-height: 100vh;">
    <div class="card shadow-lg" style="max-width: 400px; width: 100%;">
        <div class="card-body">
            <h3 class="card-title text-center mb-4">Iniciar Sesión</h3>
            <EditForm Model="@LoginUs" OnValidSubmit="register">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group my-3">
                    <label for="inputEmail" class="form-label">Email</label>
                    <InputText @bind-Value="LoginUs.email" id="inputEmail" class="form-control" />
                </div>

                <div class="form-group my-3">
                    <label for="inputPassword" class="form-label">Contraseña</label>
                    <InputText type="password" @bind-Value="LoginUs.password" id="inputPassword" class="form-control" />
                </div>


                <button type="submit" class="btn btn-warning btn-block w-100" disabled="@isLoading">

                    <span>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-in-right" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M6 3.5a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-8a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 0-1 0v2A1.5 1.5 0 0 0 6.5 14h8a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-8A1.5 1.5 0 0 0 5 3.5v2a.5.5 0 0 0 1 0z" />
                            <path fill-rule="evenodd" d="M11.854 8.354a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H1.5a.5.5 0 0 0 0 1h8.793l-2.147 2.146a.5.5 0 0 0 .708.708z" />
                        </svg>
                    </span>

                </button>
            </EditForm>
        </div>
    </div>
</div>
@code {
    private LoginRequest LoginUs = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task register()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var user = new Usuarios
                {
                    email = LoginUs.email,
                    password = LoginUs.password
                };

            var result = await usersService.Login(user);

            if (result)
            {
                await RegistrarEntradaOSalida(user);
            }
            else
            {
                await alertaService.alerta("Error", "Usuario o contraseña incorrectos.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al intentar iniciar sesión: {ex.Message}";
            Console.WriteLine($"Error detallado: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RegistrarEntradaOSalida(Usuarios user)
    {
        try
        {
            var asistencias = await usersService.GetAsistenciasConNombres();
            var asistencia = asistencias.FirstOrDefault(a => a.UsuarioNombre == user.email && a.check_salida == default);

            if (asistencia != null)
            {
                var result = await usersService.CheckOut(user.id_Usuario);
                if (result)
                {
                    await alertaService.alerta("Éxito", "Hora de salida registrada correctamente.");
                }
                else
                {
                    await alertaService.alerta("Error", "Error al registrar la hora de salida.");
                }
            }
            else
            {
                var result = await usersService.CheckIn(user.id_Usuario);
                if (result)
                {
                    await alertaService.alerta("Éxito", "Hora de entrada registrada correctamente.");
                }
                else
                {
                    await alertaService.alerta("Error", "Error al registrar la hora de entrada.");
                }
            }
        }
        catch (Exception ex)
        {
            await alertaService.alerta("Éxito", $"Registro Exitoso");
            navigationManager.NavigateTo("/MostrarRegistros");
        }
    }
}